<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:views="views.*"
					   xmlns:local="*"
					   width="1024" height="768"
					   resize="onresize(event)"
					   applicationComplete="windowedapplication2_applicationCompleteHandler(event)"
					   addedToStage="windowedapplication2_addedToStageHandler(event)"
					   horizontalCenter="center" showStatusBar="false" xmlns:components="components.*" xmlns:registration="registration.*" xmlns:debug="registration.debug.*"
					   >
	<fx:Script>
		<![CDATA[
			import com.alfo.XMLPrefs;
			import com.utils.Console;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import components.AdminWindow;
			import components.ErrorAlert;
			import components.tandcWindow;
			
			import events.NavEvent;
			import events.QuizEvent;
			import events.UserDataEvent;
			import events.UserEvent;
			
			import model.Settings;
			
			import registration.debug.DebugEvent;
			

			[Bindable]
			public var baseURL:String;
			
			[Bindable]
			public var localURL:String ="";
			
			
			public var urn:int = 0;
			
			[Bindable]
			public var ApplicationType:String ="REGISTRATION";
			[Bindable]
			public var barcode:String = null;
			
			[Bindable]
			public var score:Number = 0;
			
			private var currentSlide:String;
			
			private var currentUserID:String;
			private var currentScore:Number;
			
			protected var alertbox:ErrorAlert;
			protected var tcWindow:tandcWindow;
			
			protected var adminWindow:AdminWindow;
			
			
			protected var debugKeySequence : Array = [71,85,66,69,68];
			protected var runningKeySequence : Array = [];
			
			[Bindable]
			public var isRegistered:String = "";
			
			[Bindable]
			public var registrationIncomplete:Boolean=false;
			
			[Bindable]
			public var lastIncompleteURN:String="";

			
			[Bindable]
			public var prefs:XMLPrefs = XMLPrefs.getInstance();
			
			private var settings:Settings;
			
			
			
			protected function windowedapplication2_applicationCompleteHandler(event:FlexEvent):void
			{
				baseURL=prefs.baseURL;
				localURL=prefs.localURL;
				ApplicationType = prefs.ApplicationType;
				urn = prefs.urnLength;
				//settings.localURL = localURL;
				
				fullscreen();
				init();
			}
			
			protected function fullscreen(e:Event=null):void
			{
				stage.displayState =  StageDisplayState.FULL_SCREEN_INTERACTIVE;
				stage.quality=StageQuality.BEST;
				//stage.scaleMode = StageScaleMode.NO_SCALE;
				//stage.scaleMode=StageScaleMode.NO_BORDER;
				this.reScaleMainContent();
//				Mouse.hide();
			}
			protected function setBarCode(e:UserEvent):void
			{
				barcode = e.urn;
				trace("recorded barcode:"+barcode);
			}
			
			protected function setScore(e:UserEvent):void
			{
				score = e.score;
			}
			protected function setIsRegistered(e:UserEvent):void
			{
//				this.isRegistered =  (e.userType)
//				
//				if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
//				{
//					WelcomeBack.nextScreen = ViewEvent.LOCATION_RESTART;
//					
//				} else 
//				{
//					WelcomeBack.nextScreen = ViewEvent.LOCATION_GAME;
//				}
//				
//				trace("recorded isRegistered: "+this.isRegistered.toString());
			}
			protected function init():void {
				
				


				
				
				welcomeScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				RegisterView.addEventListener(NavEvent.NAVIGATION,navigate);
				
				this.addEventListener( UserEvent.URN, setBarCode );
				this.addEventListener( UserEvent.REGISTERED, setIsRegistered);
				
				
//				registration.addEventListener(NavEvent.NAVIGATION,navigate);
//				registration.addEventListener(NavEvent.SHOWTERMS,showTerms);
				instructionsScreen.addEventListener(NavEvent.NAVIGATION,navigate);
//				registration.addEventListener(UserDataEvent.SERVER_ERROR,handleRegError);
//				registration.addEventListener(UserDataEvent.SUBMIT_REGISTRATION,userRegistered);
				countdownScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				quizScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				quizScreen.addEventListener(QuizEvent.QUIZ_COMPLETE,quizComplete);
				
				
				
				loserScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				congratScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				lastScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				
				debugPanel.registrationModule = RegisterView.device;
				Console.log("Initiated", this);
				
				welcomeScreen.start();
			}
			
			protected function debugEventHandler(event : DebugEvent):void
			{
				debugPanel.appendOutput(String(event.socketCode));
				//debugPanel.debugOutput.text += "socket code : " + event.socketCode +  "\n";
			}
			
			protected function typingHandler(event:KeyboardEvent):void
			{
				runningKeySequence.unshift(event.keyCode);
				if(runningKeySequence.length > 10)
				{
					runningKeySequence.pop();
				}
				
				var i : int;
				var n : int = debugKeySequence.length;
				var sequencesMatch : Boolean = true;
				
				for(i=0; i<n; i++)
				{
					if(runningKeySequence[i] != debugKeySequence[i])
					{
						sequencesMatch = false;
						break;
					}
				}
				if(sequencesMatch)
				{
					debugPanel.visible = true;
				}
			}
			
			protected function quizComplete(e:QuizEvent):void { 
				Console.log("Quiz completed with score:"+e.score, this);
				currentScore = e.score;
				barcode = "12345";
				saveScore.send({ urn: barcode, game_id: prefs.game_id, location_id: prefs.location_id, score: currentScore });
			}
			protected function showTerms(e:NavEvent):void {
				Console.log("show terms and cond", this);
				tcWindow = new tandcWindow();
				tcWindow.exitFunction = null;
				
				PopUpManager.addPopUp(tcWindow, this, true);
				PopUpManager.centerPopUp(tcWindow);
			}
			protected function handleRegError(e:UserDataEvent):void {
				Console.log("error:"+e.result, this);
				alertbox = new ErrorAlert();
				alertbox.message = e.result;
				alertbox.windowTitle = "Server Error";
				alertbox.exitFunction = restart;
				
				PopUpManager.addPopUp(alertbox, this, true);
				PopUpManager.centerPopUp(alertbox);
				
			}
			protected function userRegistered(e:UserDataEvent):void {
				Console.log("user has registered"+e.result, this);
				currentUserID=e.result;
				
			}
			protected function restart():void {
			 	clearPopups();
				stack.selectedIndex=0;
			}
			protected function navigate(e:NavEvent):void {
				Console.log("going to"+e.page, this);
				currentSlide=e.page;
				switch(e.page)
				{
					case "home":
					{
						trace("go home go");
						stack.selectedIndex=0;
						welcomeScreen.start();
						
						break;
					}
					case "countdown":
					{
						stack.selectedChild=countdown;
						countdownScreen.start();
						break;
					}
					case "instructions":
					{
						stack.selectedChild=instructions;
						instructionsScreen.start();
						break;
					}
					case "quiz":
					{
						stack.selectedChild=quiz;
						quizScreen.startGame();
						break;
					}
					case "register":
					{
						trace("registrazzzz");
						//TODO: HB - CONSOLIDATE HANDOVER APPLICATION
						//registration.clearForm();
						RegisterView.init();
						stack.selectedChild=reg;
						break;
					}
					case "loser":
					{
						trace("looser!");
						stack.selectedChild=loser;
						loserScreen.start();
						break;
					}
					case "last":
					{
						trace("last");
						stack.selectedChild=last;
						break;
					}
					case "congrat":
					{
						trace("winner!");
						stack.selectedChild=congrat;
						congratScreen.time.text= currentScore+" out of "+prefs.totalQuestions;
//						secondsToMinutesSeconds(currentScore as Number);
						congratScreen.start();
						break;
					}
						
					default:
					{
						trace("default action");
						break;
					}
				}
			}
			
			protected function onresize(e:Event=null):void
			{
				try
				{
					this.reScaleMainContent();
					
				} catch (error:Error)
				{
					
				}
			}
			protected function reScaleMainContent():void
			{
				//var chromeWidth:int = this.stage.nativeWindow.width - this.stage.stageWidth;
				//var chromeHeight:int = this.stage.nativeWindow.height - this.stage.stageHeight;
				//trace("old heightL"+contentholder.height);
				//trace("groppo"+groppo.height+"largo"+groppo.width);
				//contentholder.width=this.stage.stageWidth;
				//stack.height=this.stage.stageHeight-80
				//var mult:Number=1280/Capabilities.screenResolutionX;
				//trace("scale rez:"+mult+" "+Capabilities.screenResolutionX);
				//contentholder.scaleX=mult;
				//contentholder.height=this.stage.stageHeight;
				//this.holder.scaleX = scale;
				//this.holder.scaleY = scale;
				//this.scaleX=0.95;
				contentholder.scaleX=0.8;
				contentholder.scaleY=0.8;
			}
			
			protected function homebutton_clickHandler(event:MouseEvent):void
			{
				stack.selectedIndex=0;
				
			}
			protected function clearPopups(e:Event=null):void
			{
				try
				{
					trace("*** CLEARING POPUPS");
					
					
					if (alertbox!=null)
					{
						if (!alertbox.isRemoving)
							PopUpManager.removePopUp(alertbox);
						
					}
					if (tcWindow!=null)
					{
						if (!tcWindow.isRemoving)
							PopUpManager.removePopUp(tcWindow);
						
					}
				
				} catch (error:Error)
				{
					trace("*** Error clearing popup - probably when user presses close:\n"+error.message)
				}
				
			}
			

			
			protected function windowedapplication2_addedToStageHandler(event:Event):void
			{
				//stage.scaleMode=StageScaleMode.NO_BORDER;
				
			}
			
			protected function admin_clickHandler(event:MouseEvent):void
			{
				adminWindow = new AdminWindow();
				adminWindow.exitFunction = null;
				
				PopUpManager.addPopUp(adminWindow, this, true);
				PopUpManager.centerPopUp(adminWindow);
				
			}
			protected function secondsToMinutesSeconds(secs:Number):String {
				var s:Number = secs % 60;
				var m:Number = Math.floor((secs % 3600 ) /60);
				var h:Number = Math.floor(secs / (60*60));
				
				var minutestring:String = m<10 ? "0"+String(m)+":" : String(m)+":";
				var secstring:String = s<10 ? "0"+String(s) : String(s);
				return minutestring+secstring;
			}
			
			protected function save(e:ResultEvent=null):void
			{
				Console.log( e.result, this );
				var result:Object = JSON.parse( e.result as String ) as Object;
				Console.log( result, this);
				if (result.result!="OK")
				{
					alertbox = new ErrorAlert();
					alertbox.message = result.message;
					alertbox.windowTitle = "Server Error";
					alertbox.exitFunction = restart;
					
					PopUpManager.addPopUp(alertbox, this, true);
					PopUpManager.centerPopUp(alertbox);

				} 
			}
			protected function error(e:FaultEvent):void
			{
				trace("server error"+e.fault.message.toString());
				alertbox = new ErrorAlert();
				alertbox.message = e.fault.message.toString();
				alertbox.windowTitle = "Server Error";
				alertbox.exitFunction = restart;
				
				PopUpManager.addPopUp(alertbox, this, true);
				PopUpManager.centerPopUp(alertbox);
				//this.parentApplication.dispatchEvent(new KioskError(KioskError.ERROR, e.fault.message.toString(), "COMMUNICATION ERROR"));
				
			}
			
			
		]]>
	</fx:Script>
	<fx:Style source="assets/css/font.css" />
	<fx:Style source="assets/css/main.css" />
	<fx:Declarations>
		<s:Parallel id="hideFX" duration="400">
			
			<mx:Blur blurXFrom="100.0" blurXTo="5.0"/>
			<mx:Move xTo="{stack.width}"/>
			
		</s:Parallel>
		
		<s:Parallel id="showFX" duration="400">
			
			<mx:Blur blurXFrom="100.0" blurXTo="0.0"/>
			<mx:Move xFrom="{-stack.width}"/>
			
		</s:Parallel>
		
		<s:HTTPService id="saveScore" fault="error(event)" method="POST" result="save(event)"
					   resultFormat="text"
					   url="{'http://192.168.0.150/api/index.php/skytestlab/v1/score'}"/>
	</fx:Declarations>
	<!-- top nav bar -->
	<s:BorderContainer id="navigationbar" width="100%" height="90" backgroundColor="0x91278E"
					   click="fullscreen(event)">
		<s:HGroup width="100%" height="60" verticalAlign="middle">
			<s:HGroup width="33%" horizontalAlign="left">
				<s:Spacer width="10"/><components:SkyLogoTop scaleX="0.8" scaleY="0.8"  />
			</s:HGroup>
			<s:HGroup width="33%">
				<s:Button label="admin" id="admin" click="admin_clickHandler(event)" alpha="0" />
			</s:HGroup>
			<s:HGroup width="33%" horizontalAlign="right">
				
				<s:Button id="homebutton" scaleX="0.8" scaleY="0.8" skinClass="skins.HomeButtonSkin" click="homebutton_clickHandler(event)">
					
				</s:Button>	
				<s:Spacer width="10"/>
			</s:HGroup>
		
			
			
			
		</s:HGroup>
		
	</s:BorderContainer>
	<s:VGroup id="contentholder" width="100%" height="100%" horizontalAlign="center"
			  verticalAlign="middle">

		<s:Group width="100%" height="100%">
<s:BorderContainer width="100%" height="100%" top="80" id="contentHolder" backgroundColor="#0C2A4F">

	
	
	
		
	<mx:ViewStack id="stack" height="100%" width="100%" creationPolicy="all"   >
		
		
		
		
		<s:NavigatorContent width="100%" height="100%"   id="home"  hideEffect="{hideFX}"  showEffect="{showFX}">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" id="groppo" horizontalAlign="center" >
				<views:Welcome id="welcomeScreen" />
			</s:VGroup>
			
		</s:NavigatorContent>

		<s:NavigatorContent width="100%" height="100%"   id="instructions"  hideEffect="{hideFX}"  showEffect="{showFX}">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" >
				<views:Instructions id="instructionsScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%"   id="countdown"  hideEffect="{hideFX}"  showEffect="{showFX}">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" >
				<views:Countdown id="countdownScreen" />
			</s:VGroup>
			
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="reg"  showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle" id="grappo"  width="100%" height="100%" horizontalAlign="center">
				<registration:RegistrationScan id="RegisterView" debug="debugEventHandler(event)" />
			<!-- views:Registration id="registration" / -->
				</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="quiz" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle" id="greppo"  width="100%" height="100%" horizontalAlign="center">
			<views:Questionnaire id="quizScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="congrat" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle"   width="100%" height="100%" horizontalAlign="center">
				<views:Congratulation id="congratScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="loser" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle"  width="100%" height="100%" horizontalAlign="center">
				<views:Loser id="loserScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="last" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle"  width="100%" height="100%" horizontalAlign="center">
				<views:LastScreen id="lastScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		
	</mx:ViewStack>
</s:BorderContainer>
		</s:Group>
		</s:VGroup>
	<s:SpriteVisualElement id="virtualKey"/>
	<debug:DebugPanel left="0" top="0" id="debugPanel" visible="false"/>
</s:WindowedApplication>
