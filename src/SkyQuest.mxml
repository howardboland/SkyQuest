<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:views="views.*"
					   xmlns:local="*" 
					   width="1024" height="768"
					   resize="onresize(event)"
					   alwaysInFront="true"
					   applicationComplete="windowedapplication2_applicationCompleteHandler(event)"
					   addedToStage="windowedapplication2_addedToStageHandler(event)"
					   horizontalCenter="center" showStatusBar="false" xmlns:registration="registration.*" xmlns:debug="registration.debug.*"
					   >
	<fx:Script>
		<![CDATA[
			import com.alfo.XMLPrefs;
			import com.utils.Console;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import components.AdminWindow;
			import components.ErrorAlert;
			import components.PasswordAlert;
			import components.tandcWindow;
			
			import events.ApplicationEvent;
			import events.NavEvent;
			import events.QuizEvent;
			import events.UserDataEvent;
			import events.UserEvent;
			import events.ViewEvent;
			
			import model.ML;
			import model.Settings;
			
			import registration.debug.DebugEvent;
			
			import skins.BasicButton;
			
			public var password:String = "123";
			protected var passwordbox:components.PasswordAlert;
			
			[Bindable]
			protected var loggedIn:Boolean = false;

			
			[Bindable]
			public var baseURL:String;
			
			[Bindable]
			public var localURL:String ="";
			
			
			public var urn:int = 0;
			
			[Bindable]
			public var ApplicationType:String ="REGISTRATION";
			[Bindable]
			public var barcode:String = null;
			
			[Bindable]
			public var score:Number = 0;
			
			private var currentSlide:String;
			
			private var currentUserID:String;
			private var currentScore:Number;
			
			protected var alertbox:ErrorAlert;
			protected var tcWindow:tandcWindow;
			
			protected var adminWindow:AdminWindow;
			
			
			protected var debugKeySequence : Array = [71,85,66,69,68];
			protected var runningKeySequence : Array = [];
			
			[Bindable]
			public var isRegistered:String = "";
			
			[Bindable]
			public var registrationIncomplete:Boolean=false;
			
			[Bindable]
			public var lastIncompleteURN:String="";

			
			[Bindable]
			public var prefs:XMLPrefs = XMLPrefs.getInstance();
			
			private var settings:Settings;
			
			
			private var counter:int = 0;
			private var limit:int = 20;
			
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			
			
			protected function windowedapplication2_applicationCompleteHandler(event:FlexEvent):void
			{
				
				
				fullscreen();
				init();
				
			}
			
			protected function fullscreen(e:Event=null):void
			{
				stage.displayState =  StageDisplayState.FULL_SCREEN_INTERACTIVE;
				stage.quality=StageQuality.BEST;
				//stage.scaleMode = StageScaleMode.NO_SCALE;
				//stage.scaleMode=StageScaleMode.NO_BORDER;
				this.reScaleMainContent();
//				Mouse.hide();
			}
			protected function setBarCode(e:UserEvent):void
			{
				barcode = e.urn;
				trace("recorded barcode:"+barcode);
			}
			
			protected function setScore(e:UserEvent):void
			{
				score = e.score;
			}
			protected function setIsRegistered(e:UserEvent):void
			{
//				this.isRegistered =  (e.userType)
//				
//				if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
//				{
//					WelcomeBack.nextScreen = ViewEvent.LOCATION_RESTART;
//					
//				} else 
//				{
//					WelcomeBack.nextScreen = ViewEvent.LOCATION_GAME;
//				}
//				
//				trace("recorded isRegistered: "+this.isRegistered.toString());
			}
			
			protected function setPreferences( e:Event=null ):void
			{
				Console.log("Set Preferences "+prefs, this);
				baseURL=prefs.baseURL;
				localURL="http://"+ prefs.localURL;
				ApplicationType = prefs.ApplicationType;
				urn = prefs.urnLength;
				saveScore.url = this.localURL+'/api/index.php/skytestlab/v1/score';
				Console.log( "localURL: "+localURL, this )
					//settings.localURL = localURL;
			}
			protected function playTimer( e:Event ):void
			{
				
				
				counter = Number(counter+1) % Number(limit);
//				conto.timo = counter
			}
			protected function init():void {
				
				if(Updater.isSupported) {
					trace("checking update")
					checkUpdate();
				} else {
					trace("update not supported");
				}
				
				
				if (prefs.isReady)
				{
					Console.log("Preferences is ready", this);
					setPreferences();	
				} else {
					Console.log("Waiting for Preferences", this);
					prefs.addEventListener( "PREFERENCES_READY", setPreferences);
				}
//				conto.timo = 0;
//				conto.timeLimit = 20;
//				var timer:Timer = new Timer(10);
//				timer.addEventListener(TimerEvent.TIMER, playTimer);
//				timer.start();
				this.addEventListener( ApplicationEvent.SAVE_TYPE, notifyApplicationTypeUpdate );
				
				welcomeScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				RegisterView.addEventListener(NavEvent.NAVIGATION,navigate);
				
				this.addEventListener( UserEvent.URN, setBarCode );
				this.addEventListener( UserEvent.REGISTERED, setIsRegistered);
				this.addEventListener( ViewEvent.NAVIGATE, viewChanged);
//				registration.addEventListener(NavEvent.NAVIGATION,navigate);
//				registration.addEventListener(NavEvent.SHOWTERMS,showTerms);
				instructionsScreen.addEventListener(NavEvent.NAVIGATION,navigate);
//				registration.addEventListener(UserDataEvent.SERVER_ERROR,handleRegError);
//				registration.addEventListener(UserDataEvent.SUBMIT_REGISTRATION,userRegistered);
				countdownScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				quizScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				quizScreen.addEventListener(QuizEvent.QUIZ_COMPLETE,quizComplete);
				quizScreen.addEventListener(QuizEvent.QUIZ_SAVE, quizSave);
				
				
				
				loserScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				congratScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				lastScreen.addEventListener(NavEvent.NAVIGATION,navigate);
				
				debugPanel.registrationModule = RegisterView.device;
				Console.log("Initiated", this);
				
				welcomeScreen.start();
			}
			protected function notifyApplicationTypeUpdate( e:ApplicationEvent ):void
			{
				prefs.saveApplicationVariables( e.value );
				//	trace(pref.prefsXML);
				baseURL =  "http://"+prefs.baseURL+"/";
				localURL= "http://"+prefs.localURL+"/";
				ApplicationType = prefs.ApplicationType;
				urn = prefs.urnLength;
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
				
				trace("Main :: notifyApplicationTypeUpdate :: " + ApplicationType);
			}
			protected function viewChanged( e:ViewEvent ):void
			{
				Console.log("viewChanged", this);
				if (e.location == ViewEvent.LOCATION_WELCOME_BACK)
				{
					this.barcode = e.object.toString();
					this.navigate( new NavEvent( NavEvent.NAVIGATION, "welcomeback" ) );
				} else if (e.location == ViewEvent.LOCATION_COUNTDOWN)
				{
					this.navigate( new NavEvent( NavEvent.NAVIGATION, "countdown" ) );
				} else if (e.location == ViewEvent.LOCATION_CONFIG)
				{
					this.navigate( new NavEvent( NavEvent.NAVIGATION, "config" ) );
				} else if (e.location == ViewEvent.LOCATION_RESTART)
				{
					this.navigate( new NavEvent( NavEvent.NAVIGATION, "home" ) );
				}
			}
			
			protected function debugEventHandler(event : DebugEvent):void
			{
				debugPanel.appendOutput(String(event.socketCode));
				//debugPanel.debugOutput.text += "socket code : " + event.socketCode +  "\n";
			}
			
			protected function typingHandler(event:KeyboardEvent):void
			{
				runningKeySequence.unshift(event.keyCode);
				if(runningKeySequence.length > 10)
				{
					runningKeySequence.pop();
				}
				
				var i : int;
				var n : int = debugKeySequence.length;
				var sequencesMatch : Boolean = true;
				
				for(i=0; i<n; i++)
				{
					if(runningKeySequence[i] != debugKeySequence[i])
					{
						sequencesMatch = false;
						break;
					}
				}
				if(sequencesMatch)
				{
					debugPanel.visible = true;
				}
			}
			protected function quizSave(e:QuizEvent):void { 
//				Console.log("Quiz completed with score:"+e.score, this);
//				currentScore = e.score;	
				trace("********* save quiz");
				var scoreObject:Object = { urn: barcode, game_id: prefs.game_id, location_id: prefs.location_id, score: currentScore };
				Console.log( scoreObject, this );
				saveScore.send(scoreObject);
			}
			protected function quizComplete(e:QuizEvent):void { 
				Console.log("Quiz completed with score:"+e.score, this);
				currentScore = e.score;				
//				saveScore.send({ urn: barcode, game_id: prefs.game_id, location_id: prefs.location_id, score: currentScore });
			}
			protected function showTerms(e:NavEvent):void {
				Console.log("show terms and cond", this);
				tcWindow = new tandcWindow();
				tcWindow.exitFunction = null;
				
				PopUpManager.addPopUp(tcWindow, this, true);
				PopUpManager.centerPopUp(tcWindow);
			}
			
			protected function handleRegError(e:UserDataEvent):void {
				Console.log("error:"+e.result, this);
				alertbox = new ErrorAlert();
				alertbox.message = e.result;
				alertbox.windowTitle = "Server Error";
				alertbox.exitFunction = restart;
				
				PopUpManager.addPopUp(alertbox, this, true);
				PopUpManager.centerPopUp(alertbox);
				
			}
			protected function userRegistered(e:UserDataEvent):void {
				Console.log("user has registered"+e.result, this);
				currentUserID=e.result;
				
			}
			protected function restart():void {
			 	clearPopups();
				stack.selectedIndex=0;
			}
			protected function navigate(e:NavEvent):void {
				Console.log("going to"+e.page, this);
				if(quizScreen.quizTimer) {
					quizScreen.quizTimer.stop();
				}
				if ( currentSlide == "config" && prefs.isAuto() && e.page!="home")
				{
					
				} else
				{
					currentSlide=e.page;
					
					switch(e.page)
					{
						case "home":
						{
							RegisterView.init();
							stack.selectedChild=reg;
							break;
						}
						case "countdown":
						{
							stack.selectedChild=countdown;
							countdownScreen.start();
							break;
						}
						case "instructions":
						{
							stack.selectedChild=instructions;
							instructionsScreen.start();
							break;
						}
						case "quiz":
						{
							stack.selectedChild=quiz;
							quizScreen.startGame();
							break;
						}
						case "register":
						{
							// the home becomes register
							trace("registrazzzz");
							
							RegisterView.init();
							stack.selectedChild=reg;
							break;
						}
						case "welcomeback":
						{
							trace("welcomeback");
							stack.selectedChild=welcomeback;
							this.WelcomeBackView.nextScreen = ViewEvent.LOCATION_COUNTDOWN;
							this.WelcomeBackView.onInitialise();
							break;
						}
						case "loser":
						{
							trace("looser!");
							stack.selectedChild=loser;
							loserScreen.start();
							break;
						}
						case "last":
						{
							trace("last");
							stack.selectedChild=last;
							break;
						}
						case "congrat":
						{
							trace("winner!");
							stack.selectedChild=congrat;
							congratScreen.time.text= currentScore+"/"+prefs.totalQuestions;
	//						secondsToMinutesSeconds(currentScore as Number);
							congratScreen.start();
							break;
						}
						case "config":
						{
							trace("config!");
							stack.selectedChild=configView;
							
							break;
						}
							
						default:
						{
							trace("default action");
							break;
						}
					}
				}
			}
			
			protected function onresize(e:Event=null):void
			{
				try
				{
					this.reScaleMainContent();
					
				} catch (error:Error)
				{
					
				}
			}
			protected function reScaleMainContent():void
			{
				//var chromeWidth:int = this.stage.nativeWindow.width - this.stage.stageWidth;
				//var chromeHeight:int = this.stage.nativeWindow.height - this.stage.stageHeight;
				//trace("old heightL"+contentholder.height);
				//trace("groppo"+groppo.height+"largo"+groppo.width);
				//contentholder.width=this.stage.stageWidth;
				//stack.height=this.stage.stageHeight-80
				//var mult:Number=1280/Capabilities.screenResolutionX;
				//trace("scale rez:"+mult+" "+Capabilities.screenResolutionX);
				//contentholder.scaleX=mult;
				//contentholder.height=this.stage.stageHeight;
				//this.holder.scaleX = scale;
				//this.holder.scaleY = scale;
				//this.scaleX=0.95;
				
				contentholder.scaleX=0.8;
				contentholder.scaleY=0.8;
				var screenWidth : Number = Capabilities.screenResolutionX;
				var screenHeight : Number = Capabilities.screenResolutionY;
				var bgWidth : Number = 1080;
				var bgHeight : Number = 1920;
				var scaleDiff:Number = Math.max(screenWidth/1366, screenHeight/768);
				if ( ( screenWidth > screenHeight) )
				{
//					Console.log("widthwise", this);
					background.width = (screenWidth);
					background.height = (screenWidth * bgHeight / bgWidth);
					
				} else if ( ( screenWidth < screenHeight) )
				{
//					Console.log("heightwise", this);
					background.height = (screenHeight);
					background.width = (screenHeight  * bgWidth / bgHeight);
					
				} else {
					
//					Console.log("samewise", this);
					background.width = screenWidth;
					background.height = screenWidth;
					
				}
//				Console.log( "width: "+background.width, this );
//				Console.log( "height: "+background.height, this );
//				Console.log( "scale: "+scaleDiff, this );
			}
			
			protected function homebutton_clickHandler(event:MouseEvent):void
			{
				if(quizScreen.quizTimer) {
					quizScreen.quizTimer.stop();
				}
				stack.selectedIndex=3;
				
			}
			protected function clearPopups(e:Event=null):void
			{
				try
				{
					trace("*** CLEARING POPUPS");
					
					
					if (alertbox!=null)
					{
						if (!alertbox.isRemoving)
							PopUpManager.removePopUp(alertbox);
						
					}
					if (tcWindow!=null)
					{
						if (!tcWindow.isRemoving)
							PopUpManager.removePopUp(tcWindow);
						
					}
				
				} catch (error:Error)
				{
					trace("*** Error clearing popup - probably when user presses close:\n"+error.message)
				}
				
			}
			

			
			protected function windowedapplication2_addedToStageHandler(event:Event):void
			{
				//stage.scaleMode=StageScaleMode.NO_BORDER;
				
			}
			
			protected function admin_clickHandler(event:MouseEvent):void
			{
				adminWindow = new AdminWindow();
				adminWindow.exitFunction = null;
				
				PopUpManager.addPopUp(adminWindow, this, true);
				PopUpManager.centerPopUp(adminWindow);
				
			}
			protected function secondsToMinutesSeconds(secs:Number):String {
				var s:Number = secs % 60;
				var m:Number = Math.floor((secs % 3600 ) /60);
				var h:Number = Math.floor(secs / (60*60));
				
				var minutestring:String = m<10 ? "0"+String(m)+":" : String(m)+":";
				var secstring:String = s<10 ? "0"+String(s) : String(s);
				return minutestring+secstring;
			}
			
			protected function save(e:ResultEvent=null):void
			{
				Console.log( e.result, this );
				var result:Object = JSON.parse( e.result as String ) as Object;
				Console.log( result, this);
				if (result.result!="OK")
				{
					alertbox = new ErrorAlert();
					alertbox.message = result.message;
					alertbox.windowTitle = "Server Error";
					alertbox.exitFunction = restart;
					
					PopUpManager.addPopUp(alertbox, this, true);
					PopUpManager.centerPopUp(alertbox);

				} 
			}
			protected function error(e:FaultEvent):void
			{
				trace("server error"+e.fault.message.toString());
				alertbox = new ErrorAlert();
				alertbox.message = e.fault.message.toString();
				alertbox.windowTitle = "Server Error";
				alertbox.exitFunction = restart;
				
				PopUpManager.addPopUp(alertbox, this, true);
				PopUpManager.centerPopUp(alertbox);
				//this.parentApplication.dispatchEvent(new KioskError(KioskError.ERROR, e.fault.message.toString(), "COMMUNICATION ERROR"));
				
			}
			
			protected function exitApplication(event:MouseEvent=null):void
			{
				NativeApplication.nativeApplication.exit();
			}
			protected function logout(event:MouseEvent=null):void
			{
				loggedIn = false;
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
				
			}
			protected function changeConfig(event:MouseEvent=null):void
			{
				
				if (loggedIn)
				{
					this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_CONFIG ));
					
				} else {
					showPassword("Please enter password", password, this.login)
				}
			}
			protected function login( e:Event=null ):void
			{
				this.loggedIn = true;
				changeConfig();
				
			}
			
			protected function showPassword(title:String="", password:String=null, exitFunction:Function=null):void
			{
				clearPopups();
				
				passwordbox = new PasswordAlert();
				passwordbox.windowTitle = title;
				passwordbox.password = password;
				passwordbox.exitFunction = exitFunction;
				
				PopUpManager.addPopUp(passwordbox, this, false);
				PopUpManager.centerPopUp(passwordbox);
				this.dispatchEvent( new ApplicationEvent( ApplicationEvent.POPUP_OPEN ) );
//				centerPopups();
			}
			
			protected function home_creationCompleteHandler(event:FlexEvent):void
			{
				// takes to scan finger
				stack.selectedIndex=3;
				
			}
			
			
			/**
			 * This function is triggered when the application finished to load;
			 * Here we initialize <code>appUpdater</code> and set some properties
			 */ 
			private function checkUpdate():void {
				setApplicationVersion();
				// we set the URL for the update.xml file
				appUpdater.updateURL = "http://skyexperience.co.uk/updater/updatequiz.xml";
				//we set the event handlers for INITIALIZED and ERROR
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onError);
				//we can hide the dialog asking for permission for checking for a new update;
				//if you want to see it just leave the default value (or set true).
				appUpdater.isCheckForUpdateVisible = false;
				//if isFileUpdateVisible is set to true, File Update, File No Update, 
				//and File Error dialog boxes will be displayed
				appUpdater.isFileUpdateVisible = false;
				//if isInstallUpdateVisible is set to true, the dialog box for installing the update is visible
				appUpdater.isInstallUpdateVisible = false;
				//we initialize the updater
				appUpdater.initialize();
			}
			
			private function onUpdate(event:UpdateEvent):void {
				//start the process of checking for a new update and to install
				appUpdater.checkNow();
			}
			
			/**
			 * Handler function for error events triggered by the ApplicationUpdater.initialize
			 * @param ErrorEvent 
			 */ 
			private function onError(event:ErrorEvent):void {
				Alert.show(event.toString());
			}
			
			/**
			 * A simple code just to read the current version of the application 
			 * and display it in a label. 
			 */ 
			private function setApplicationVersion():void {
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
			}
			
			

			
		]]>
	</fx:Script>
	<fx:Style source="assets/css/Fonts.css" />
	<fx:Style source="assets/css/Main.css" />
	<fx:Declarations>
		<s:Parallel id="hideFX" duration="400">
			
			<mx:Blur blurXFrom="100.0" blurXTo="5.0"/>
			<mx:Move xTo="{stack.width}"/>
			
		</s:Parallel>
		
		<s:Parallel id="showFX" duration="400">
			
			<mx:Blur blurXFrom="100.0" blurXTo="0.0"/>
			<mx:Move xFrom="{-stack.width}"/>
			
		</s:Parallel>
		
		<s:HTTPService id="saveScore" fault="error(event)" method="POST" result="save(event)"
					   resultFormat="text"
					   url="{this.localURL+'/api/index.php/skytestlab/v1/score'}"/>
	</fx:Declarations>
	<!-- top nav bar -->
	<s:VGroup width="100%" height="100%" clipAndEnableScrolling="true">
		<s:Image smooth="true" smoothingQuality="high" id="background" source="@Embed('assets/images/background.png')"  />
	</s:VGroup>
	<s:Group id="navigationbar" width="100%"  height="90" 
					   click="fullscreen(event)">
		<s:Rect width="100%" height="90">
			<s:fill>
				<s:SolidColor color="0x000000" alpha="0" />
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" height="90" verticalAlign="middle" >
			<s:HGroup width="33%" horizontalAlign="left" paddingTop="70">
				<s:Spacer width="10"/><local:SkyLogo click="homebutton_clickHandler(event)"  useHandCursor="true" mouseEnabled="true"/>
			</s:HGroup>
			<s:HGroup width="33%">
				<!--s:Button label="admin" id="admin" click="admin_clickHandler(event)" alpha="0" /-->
			</s:HGroup>
			<s:HGroup width="33%" horizontalAlign="right" verticalAlign="middle">
				
				<!--s:Button id="homebutton" scaleX="0.8" scaleY="0.8" skinClass="skins.HomeButtonSkin" click="homebutton_clickHandler(event)">
				</s:Button-->	
				<s:Button skinClass="skins.BasicButton" styleName="nav" label="{ML.t('Quit')}" click="exitApplication(event)" id="quitButton" color="0xFFFFFF" visible="{loggedIn}" includeInLayout="{loggedIn}" />
				<s:Spacer width="10"/>
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/padlock.png')" click="changeConfig(event)" color="0xFFFFFF"   visible="{!loggedIn}" includeInLayout="{!loggedIn}"/>
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/settings.png')" click="changeConfig(event)" color="0xFFFFFF"   visible="{loggedIn}" includeInLayout="{loggedIn}"/>
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/padlock_open.png')" click="logout(event)" color="0xFFFFFF"  visible="{loggedIn}" includeInLayout="{loggedIn}" />
			</s:HGroup>
		
			
			
			
		</s:HGroup>
		
	</s:Group>
	<s:VGroup id="contentholder" width="100%" height="100%" horizontalAlign="center"
			  verticalAlign="middle">

		<s:Group width="100%" height="100%">
<s:BorderContainer width="100%" height="100%" top="80" id="contentHolder" backgroundAlpha="0" borderVisible="false">

	
	<!--local:Contatore id="conto" x="200" y="100" z="0" rotationX="20" rotationY="30" rotationZ="0"  timo="5" timeLimit="10" /-->
	
		
	<mx:ViewStack id="stack" height="100%"  width="100%" creationPolicy="all" creationComplete="home_creationCompleteHandler(event)"   >
		
		
		
		
		<s:NavigatorContent width="100%" height="100%"   id="home"  hideEffect="{hideFX}"  showEffect="{showFX}">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" id="groppo" horizontalAlign="center" >
				<views:Welcome id="welcomeScreen" />
			</s:VGroup>
			
		</s:NavigatorContent>

		<s:NavigatorContent width="100%" height="100%"   id="instructions"  hideEffect="{hideFX}"  showEffect="{showFX}">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" >
				<views:Instructions id="instructionsScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%"   id="countdown"  hideEffect="{hideFX}"  showEffect="{showFX}">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" >
				<views:Countdown id="countdownScreen" />
			</s:VGroup>
			
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="reg"  showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle" id="grappo"  width="100%" height="100%" horizontalAlign="center">
				<registration:RegistrationScan id="RegisterView" debug="debugEventHandler(event)" />
			<!-- views:Registration id="registration" / -->
				</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="welcomeback"  showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle"  width="100%" height="100%" horizontalAlign="center">
				<registration:WelcomeBackView id="WelcomeBackView" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="quiz" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle" id="greppo"  width="100%" height="100%" horizontalAlign="center">
			<views:Questionnaire id="quizScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="congrat" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle"   width="100%" height="100%" horizontalAlign="center">
				<views:Congratulation id="congratScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="loser" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle"  width="100%" height="100%" horizontalAlign="center">
				<views:Loser id="loserScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="last" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle"  width="100%" height="100%" horizontalAlign="center">
				<views:LastScreen id="lastScreen" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" hideEffect="{hideFX}" id="configView" showEffect="{showFX}" >
			<s:VGroup verticalAlign="middle"  width="100%" height="100%" horizontalAlign="center">
				<views:ApplicationType id="SelectApplication" />
			</s:VGroup>
		</s:NavigatorContent>
		
		
	</mx:ViewStack>
</s:BorderContainer>
		</s:Group>
		</s:VGroup>
	<s:SpriteVisualElement id="virtualKey"/>
	<debug:DebugPanel left="0" top="0" id="debugPanel" visible="false"/>
</s:WindowedApplication>
